// Code generated by MockGen. DO NOT EDIT.
// Source: internal/browser/chromedp.go

// Package mock_browser is a generated GoMock package.
package mock_browser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrowserDriver is a mock of BrowserDriver interface.
type MockBrowserDriver struct {
	ctrl     *gomock.Controller
	recorder *MockBrowserDriverMockRecorder
}

// MockBrowserDriverMockRecorder is the mock recorder for MockBrowserDriver.
type MockBrowserDriverMockRecorder struct {
	mock *MockBrowserDriver
}

// NewMockBrowserDriver creates a new mock instance.
func NewMockBrowserDriver(ctrl *gomock.Controller) *MockBrowserDriver {
	mock := &MockBrowserDriver{ctrl: ctrl}
	mock.recorder = &MockBrowserDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowserDriver) EXPECT() *MockBrowserDriverMockRecorder {
	return m.recorder
}

// ScreenShot mocks base method.
func (m *MockBrowserDriver) ScreenShot(url, selector string, width, height int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScreenShot", url, selector, width, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScreenShot indicates an expected call of ScreenShot.
func (mr *MockBrowserDriverMockRecorder) ScreenShot(url, selector, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScreenShot", reflect.TypeOf((*MockBrowserDriver)(nil).ScreenShot), url, selector, width, height)
}
